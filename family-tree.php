<?php
class Person{
	//тут мы создаем класс.Класс это подобие описания какого то объекта в жизни.
	//мы можем заранее создать класс "яблоко" и описать его свойства и действия.
	//В данном случае мы создаем класс "персона"

    private $name;
	//Добавляем ей свойство имя
    private $lastname;
	//Добавляем свойство фамилия
    private $age;
	//возраст
    private $mother;
	//мама
    private $father;
	//папа
	
	
	//Тут ниже происходит сам момент создания объекта
    public function __construct($name, $lastname, $age, $mother, $father){
        $this->name = $name;
        $this->lastname = $lastname;
        $this->age = $age;
        $this->mother = $mother;
        $this->father = $father;
    }
	
	//тут мы определяем некие действия с нашим объектом.
	//Т.е. например как получить фамилию в данном случае.
    public function getLastname(){
        return $this->lastname;
    }

	//возраст
    public function getAge(){
        return $this->age;
    }
	//Имя мамы
    public function getMother(){
        return $this->mother;
    }
	//имя папы
    public function getFather(){
        return $this->father;
    }
	//Имя самого объекта
	public function getName(){
        return $this->name;
    }
	//А эта функция выводит сборную информацию об объекте
    public function info(){
        $result = "Имя:" . $this->name;
        $result = "Фамилия:" . $this->lastname;
        $result = "Возраст:" . $this->age;
        if ($this->getMother() != null){
            $result = "Имя матери:" . $this->getMother()->getName();
            if ($this->getMother()->getFather() != null){
            }
        }//Здесь была ошибка в имени функции, было написано getNane вместо getName
        $result = "Имя дедушки по маминой линии:" . $this->getMother()->getFather()->getName();
        if ($this->getFather() != null) {
            $result = " Имя отца:" . $this->getFather()->getName();
            if ($this->getFather()->getFather() != null) {
                $result = "Имя дедушки по папиной линии:" . $this->getFather()->getFather()->getName();
        
            return $result;
            }
        }
        

        {
        }
    }
}

//Здесь ОПИСАНИЕ класса заканчивает.
//Мы только описали некий объект!
//Далее мы его будем создавать!
//Берем переменную которая будет хранить наш объект
//и пишем создать объект который относится классу Person
//В скобках сразу пишем его начальные свойства
//Первый параметр объекта - имя
//Второй параметр - фамилия
//Третий параметр - возраст
//Четвёртый параметр у нас используется как указатель на другой объект.
//Т.е. у нас заранее должен быть создан объект "мама"
//В данном случае я проставлю null(т.е. отсутствует)
//Отец соответственно тоже
		
		//как видно из строчек ниже - у наших мамы и папы тоже есть родители(4,5 параметры)
		//Давайте добавим и их
		$Person7 = new Person ("Николай", "Алексеев", 71, null, null);
        $Person6 = new Person ("Лариса", "Алексеева", 72, null, null);
        $Person5 = new Person("Михаил", "Бурый", 70, null, null);
        $Person4 = new Person("Надежда", "Бурая", 82, null, null);
		//Их добавление я не думаю что нужно пояснять - всё точно также
		//Единственное отличие - 4 и 5 параметры у них null
		//Т.е. родителей у них не указываем.
		
		//Маму будут звать Наталья
		$mother = new Person("Наталья", "Лысо-Иванова", 49, $Person4, $Person5);
		$dad = new Person("Максим", "Алексеев", 50, $Person6, $Person7);
		//Тут мы проставили объект мама в качестве мамы для нашего Алексея(4 параметр),соответственно 5 параметр -отец
		$men = new Person ("Алексей","Иванов",25,$mother,$dad);
//Вот этой строчкой мы создали персонажа(объект)
//Давайте ему добавим родителей

//По поводу того что ничего не выводилось на экране.
//Это происходило потому что объект персоны создавался в конструкторе самой персоны.
//Нужно создавать персону вне конструктора!(для этого внимательно следи за открытием закрытием фигурной скобки(начало-конец функции).
//Этот код я проверил - он работает

//Еще поясню
//Текст после двойной наклонной линии(слэш) считается комментарием(он не обрабатывается php)
//Также сделать комментарием можно и несколько строк знаком /*

/*
		$Person7 = new Person ("Николай", "Алексеев", 71, null, null);
        $Person6 = new Person ("Лариса", "Алексеева", 72, null, null);
        $Person5 = new Person("Михаил", "Бурый", 70, null, null);
        $Person4 = new Person("Надежда", "Бурая", 82, null, null);
        $Person3 = new Person("Алексей", "Алексеев", 42, $Person7, $Person6);
        $Person2 = new Person("Наталья", "Лысо-Иванова", 49, $Person5, $Person4);
        $Person1 = new Person("Максим", "Алексеев", 16, $Person3, $Person2);
*/
//Так же его необходимо закрыть знаком */
		
		//Тут проблема в том что Наталья указана как отец Максима...
		//А у Натальи отец Надежда...
		//Проблема не в коде а во входных данных
		//Давайте попробуем сначала...
		//Ну что, теперь давайте выведем нашего мальчика.


		//Команда echo выводит на экран браузера содержимое переменных
		//Плюс мы указываем что из переменной(указателя $men) мы хотим получить функцию info.
		
		//Кстати говоря, программисты в большинстве случаев используют функцию print_r() а не echo
		//Функция print_r выводит больше информации об ошибках и данных которые находятся в переменной.
		//Использовать print_r очень просто
		//В данном случае это выглядело бы как  print_r($men->info());
		//Но на чистовой вариант конечно же выводим echo
		
		//Сохраняем и пробуем
        echo $men->info();